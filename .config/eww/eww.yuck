;; define the active workspace for hyprctl
(defpoll active_workspace :interval "1s"
	"hyprctl -j activeworkspace | grep -oP '(?<=\"id\":\\s)(\\d+)'")

(defvar calendar_open false)

(deflisten music_info :initial ""
	"playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll album_art :initial "" :interval "5s"
	"scripts/album_art.sh")

(deflisten music_status :initial "Stopped"
	"playerctl status --follow")

(deflisten position :initial ""
	"playerctl metadata --follow --format {{position}}")

(deflisten duration :initial ""
	"playerctl metadata --follow mpris:length")

(defpoll volume :interval "1s"
	"scripts/getvol")

(defpoll time :interval "10s"
	"date '+%m/%d  %H:%M'")


(defwidget bar []
	(centerbox :orientation "h" 
		(music) 
		(box
			(box 
				:class "workspaces-container" 
				:space-evenly false
				(workspaces)
				(weather)
			)


		)
		(sidestuff)
	)
)

(defwidget sidestuff []
(box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
	(metric :label ""
			:value volume
			:onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%")
	(metric :label ""
			:value {EWW_RAM.used_mem_perc}
			:onchange "")
	(metric :label ""
			:value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
			:onchange "")
	(button 
		:class "clock" 
		; toggle the calendar window open/closed
		:onclick "eww open calendar;sleep 2;eww close calendar"
		{time}
	)))

(defwidget workspaces []
(box	:class "workspaces"
		:orientation "h"
		:space-evenly true
		:halign "center"
		:spacing 10
	(button :class {active_workspace == 1 ? "active" : ""} :onclick "hyprctl dispatch workspace 1" 1)
	(button :class {active_workspace == 2 ? "active" : ""} :onclick "hyprctl dispatch workspace 2" 2)
	(button :class {active_workspace == 3 ? "active" : ""} :onclick "hyprctl dispatch workspace 3" 3)
	(button :class {active_workspace == 4 ? "active" : ""} :onclick "hyprctl dispatch workspace 4" 4)
	(button :class {active_workspace == 5 ? "active" : ""} :onclick "hyprctl dispatch workspace 5" 5)
	(button :class {active_workspace == 6 ? "active" : ""} :onclick "hyprctl dispatch workspace 6" 6)
	(button :class {active_workspace == 7 ? "active" : ""} :onclick "hyprctl dispatch workspace 7" 7)
	(button :class {active_workspace == 8 ? "active" : ""} :onclick "hyprctl dispatch workspace 8" 8)
	(button :class {active_workspace == 9 ? "active" : ""} :onclick "hyprctl dispatch workspace 9" 9)
))

(defwidget weather []
	(box
		:class "weather"
		:orientation "h"
		:space-evenly false
		:halign "start"
	)
)

(defwidget music []
	(box 
		:class "music"
		:orientation "h"
		:space-evenly false
		:halign "start"
		:visible {music_status != "Stopped"}
		(box
			:class "controls"
			:spacing 3
			(button :width 50 :onclick "playerctl previous" "")
			(button :width 50 :onclick "playerctl play-pause" 
				(overlay
					(box :class "progress-container"
						(circular-progress 
							:class {music_status == "Playing" ? "progress playing" : "progress paused"}
							:value "${position / duration * 100}" 
							:start-at 75 
							:thickness 1
						)
					)
					(label :text {music_status == "Playing" ? "" : ""})
				)
			)
			(button :width 50 :onclick "playerctl next" "")
		)
		(image :class "album_art" :path album_art :image-width 30 :image-height 30)
		(overlay :class "overlay"
			;; (transform
			;; 	:translate-y -250
			;; 	(image :path album_art :image-width 500 :image-height 500)
			;; )
			(label 
				:class "info"
				:limit-width 50
				:text {music_info != "" ? "${music_info}" : ""}
			)
		)
	)
)


(defwidget metric [label value onchange]
(box :orientation "h"
		:class "metric"
		:space-evenly false
	(box :class "label" label)
	(scale :min 0
			:max 101
			:active {onchange != ""}
			:value value
			:onchange onchange)))



	;; "date '+%H:%M %b %d, %Y'")

(defwindow calendar
	:monitor 0
	:windowtype "dock"
	:stacking "bg"
	;; :exclusive true
	:geometry (geometry :x "18%"
		:y "5px"
		:width "300px"
		:height "10px"
		:anchor "top right")
	:reserve (struts :side "top" :distance "4%")
(button :onclick "eww close calendar" (calendar)))

(defwindow bar
	:monitor 0
	:windowtype "dock"
	:stacking "bg"
	:exclusive true
	:geometry (geometry :x "0%"
		:y "0%"
		:width "60%"
		:height "10px"
		:anchor "top center")
	:reserve (struts :side "top" :distance "4%")
(bar))
